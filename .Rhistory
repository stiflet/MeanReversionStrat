select(-Time)
dfA
dfB <- read.csv('dfB.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
library(tidyverse)
dfA <- read.csv('dfA.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Date)
dfA
dfB <- read.csv('dfB.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Date)
library(tidyverse)
dfA <- read.csv('dfA.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Date, -Time)
dfA
dfB <- read.csv('dfB.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Date, -Time)
#py_run_file('CoinData2.py')
source('corMat.R')
py_run_file('candles.py')
library(tidyverse)
dfA <- read.csv('dfA.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Date, -Time)
dfA
dfB <- read.csv('dfB.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Date, -Time)
library(tidyverse)
dfA <- read.csv('dfA.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Date, -Time)
dfA
dfB <- read.csv('dfB.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Date, -Time)
corrPairs <- apply(corr, 1, function(row){
coinA <- row[3]
coinB <- row[4]
corNames <- c(coinA, coinB)
A <- dfA %>%
filter(Pair == coinA)
B <- dfB %>%
filter(Pair == coinB)
df.final <- inner_join(A, B, by = 'Date', suffix = c('A','B'), relationship = "many-to-many")%>%
distinct(Date, .keep_all = TRUE)%>%
rename(
CoinA_Close = Closing.priceA,
CoinB_Close = Closing.priceB,
CoinA = PairA,
CoinB = PairB
)
return(df.final)
})
source('priceFun.R')
source('priceFun.R')
high_corr
library(tidyverse)
dfA <- read.csv('dfA.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
dfA
dfB <- read.csv('dfB.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
source('priceFun.R')
high_corr
source('priceFun.R')
source('priceFun.R')
dfZValues
zValues <- lapply(corrPairs, function(df){
missMatch(df)
})%>%
list_rbind()%>%
na.omit%>%
arrange(desc(abs(z_last)))
infos <- apply(zValues, 1, function(row){
coinA <- row[1]
coinB <- row[2]
CoinA_Close <- dfA %>%
filter(Pair == coinA)%>%
select(Closing.price)%>%
c
CoinB_Close <- dfB %>%
filter(Pair == coinB)%>%
select(Closing.price)%>%
c
CoinA_Close <- CoinA_Close[[1]]
CoinB_Close <- CoinB_Close[[1]]
lenB <- length(CoinB_Close)
lenA <- length(CoinA_Close)
if(lenA != lenB){
minlen <- min(c(lenA, lenB))
CoinA_Close <- CoinA_Close[1:minlen]
CoinB_Close <- CoinA_Close[1:minlen]
}
beta <- coef(lm(log(CoinB_Close) ~ log(CoinA_Close)))[[2]]
PA <- last(CoinA_Close)
PB <- last(CoinB_Close)
if(as.double(row[[3]]) < 0){
qty_B <-  N_short / PB_now
qty_A <-  beta * N_short / PA_now
}
if(as.double(row[[3]]) > 0){
qty_A <-  N_short / PA_now
qty_B <-  beta * N_short / PB_now
}
df <- data.frame(
AmountA = qty_A,
AmountB = qty_B,
lastCloseA = PA,
lastCloseB = PB
)
return(df)
})%>%
list_rbind()
cbind(zValues, infos)
library(reticulate)
#py_run_file('CoinData2.py')
source('corMat.R')
py_run_file('candles.py')
library(tidyverse)
dfA <- read.csv('dfA.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
dfA
dfB <- read.csv('dfB.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
source('priceFun.R')
dfZValues
zValues <- lapply(corrPairs, function(df){
missMatch(df)
})%>%
list_rbind()%>%
na.omit%>%
arrange(desc(abs(z_last)))
infos <- apply(zValues, 1, function(row){
coinA <- row[1]
coinB <- row[2]
CoinA_Close <- dfA %>%
filter(Pair == coinA)%>%
select(Closing.price)%>%
c
CoinB_Close <- dfB %>%
filter(Pair == coinB)%>%
select(Closing.price)%>%
c
CoinA_Close <- CoinA_Close[[1]]
CoinB_Close <- CoinB_Close[[1]]
lenB <- length(CoinB_Close)
lenA <- length(CoinA_Close)
if(lenA != lenB){
minlen <- min(c(lenA, lenB))
CoinA_Close <- CoinA_Close[1:minlen]
CoinB_Close <- CoinA_Close[1:minlen]
}
beta <- coef(lm(log(CoinB_Close) ~ log(CoinA_Close)))[[2]]
PA <- last(CoinA_Close)
PB <- last(CoinB_Close)
if(as.double(row[[3]]) < 0){
qty_B <-  N_short / PB_now
qty_A <-  beta * N_short / PA_now
}
if(as.double(row[[3]]) > 0){
qty_A <-  N_short / PA_now
qty_B <-  beta * N_short / PB_now
}
df <- data.frame(
AmountA = qty_A,
AmountB = qty_B,
lastCloseA = PA,
lastCloseB = PB
)
return(df)
})%>%
list_rbind()
cbind(zValues, infos)
# Notional you want on the *short* leg (e.g. $10 000)
N_short <- 10
# Current mid-prices
#PA_now <- last(PA)
#PB_now <- last(PB)
PA_now <- 0.002416
PB_now <- 0.00765
# Position sizes
qty_B <-  N_short / PB_now
qty_A <-  beta * N_short / PA_now
PA
PB
round(qty_A, 2)
round(qty_B, 2)
library(ggplot2)
library(zoo)           # rollapply
# ── close_check() ─────────────────────────────────────────────────────────────
# pair_df    : data.frame with columns PriceA, PriceB (last row = current price)
# beta       : hedge-ratio from your formation OLS  (slope coef)
# roll_win   : rolling window length for mean / sd  (30 by default)
# entry_band : |z| level that opens a trade        (1.5 in thesis)
close_check <- function(pair_df, beta, roll_win = 30, entry_band = 1.5) {
stopifnot(all(c("PriceA", "PriceB") %in% names(pair_df)))
A <- pair_df$PriceA
B <- pair_df$PriceB
spread <- B - beta * A                     # or use logs + intercept, if preferred
roll_m <- rollapply(spread, roll_win, mean, align = "right", fill = NA)
roll_s <- rollapply(spread, roll_win, sd,   align = "right", fill = NA)
z      <- (spread - roll_m) / roll_s
latest_z <- tail(z, 1)
decision <- ifelse(abs(latest_z) <= 0, "CLOSE", "HOLD")   # thesis exit rule
# ── 1. plot full z-score series ────────────────────────────────────────────
plot_df <- data.frame(idx = seq_along(z), z = z)
p <- ggplot(plot_df, aes(idx, z)) +
geom_line(colour = "steelblue") +
geom_hline(yintercept = 0,          linetype = "solid",  colour = "darkgreen") +
geom_hline(yintercept =  c(-entry_band, entry_band),
linetype = "dashed", colour = "red") +
labs(title  = sprintf("Spread z-score (latest = %.2f) → %s",
latest_z, decision),
x = "Observation", y = "z-score") +
theme_minimal()
print(p)
# ── 2. return info for programmatic use ────────────────────────────────────
invisible(list(
latest_z = latest_z,
decision = decision,
z_series = z
))
}
close_check()
library(reticulate)
#py_run_file('CoinData2.py')
source('corMat.R')
py_run_file('candles.py')
library(tidyverse)
dfA <- read.csv('dfA.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
dfA
dfB <- read.csv('dfB.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
source('priceFun.R')
dfZValues
zValues <- lapply(corrPairs, function(df){
missMatch(df)
})%>%
list_rbind()%>%
na.omit%>%
arrange(desc(abs(z_last)))
infos <- apply(zValues, 1, function(row){
coinA <- row[1]
coinB <- row[2]
CoinA_Close <- dfA %>%
filter(Pair == coinA)%>%
select(Closing.price)%>%
c
CoinB_Close <- dfB %>%
filter(Pair == coinB)%>%
select(Closing.price)%>%
c
CoinA_Close <- CoinA_Close[[1]]
CoinB_Close <- CoinB_Close[[1]]
lenB <- length(CoinB_Close)
lenA <- length(CoinA_Close)
if(lenA != lenB){
minlen <- min(c(lenA, lenB))
CoinA_Close <- CoinA_Close[1:minlen]
CoinB_Close <- CoinA_Close[1:minlen]
}
beta <- coef(lm(log(CoinB_Close) ~ log(CoinA_Close)))[[2]]
PA <- last(CoinA_Close)
PB <- last(CoinB_Close)
if(as.double(row[[3]]) < 0){
qty_B <-  N_short / PB_now
qty_A <-  beta * N_short / PA_now
}
if(as.double(row[[3]]) > 0){
qty_A <-  N_short / PA_now
qty_B <-  beta * N_short / PB_now
}
df <- data.frame(
AmountA = qty_A,
AmountB = qty_B,
lastCloseA = PA,
lastCloseB = PB
)
return(df)
})%>%
list_rbind()
cbind(zValues, infos)
library(reticulate)
#py_run_file('CoinData2.py')
source('corMat.R')
py_run_file('candles.py')
library(tidyverse)
dfA <- read.csv('dfA.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
dfA
dfB <- read.csv('dfB.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
source('priceFun.R')
dfZValues
zValues <- lapply(corrPairs, function(df){
missMatch(df)
})%>%
list_rbind()%>%
na.omit%>%
arrange(desc(abs(z_last)))
infos <- apply(zValues, 1, function(row){
coinA <- row[1]
coinB <- row[2]
CoinA_Close <- dfA %>%
filter(Pair == coinA)%>%
select(Closing.price)%>%
c
CoinB_Close <- dfB %>%
filter(Pair == coinB)%>%
select(Closing.price)%>%
c
CoinA_Close <- CoinA_Close[[1]]
CoinB_Close <- CoinB_Close[[1]]
lenB <- length(CoinB_Close)
lenA <- length(CoinA_Close)
if(lenA != lenB){
minlen <- min(c(lenA, lenB))
CoinA_Close <- CoinA_Close[1:minlen]
CoinB_Close <- CoinA_Close[1:minlen]
}
beta <- coef(lm(log(CoinB_Close) ~ log(CoinA_Close)))[[2]]
PA <- last(CoinA_Close)
PB <- last(CoinB_Close)
if(as.double(row[[3]]) < 0){
qty_B <-  N_short / PB_now
qty_A <-  beta * N_short / PA_now
}
if(as.double(row[[3]]) > 0){
qty_A <-  N_short / PA_now
qty_B <-  beta * N_short / PB_now
}
df <- data.frame(
AmountA = qty_A,
AmountB = qty_B,
lastCloseA = PA,
lastCloseB = PB
)
return(df)
})%>%
list_rbind()
cbind(zValues, infos)
library(reticulate)
#py_run_file('CoinData2.py')
source('corMat.R')
py_run_file('candles.py')
library(tidyverse)
dfA <- read.csv('dfA.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
dfA
dfB <- read.csv('dfB.csv')%>%
data.frame()%>%
select(Time, Closing.price, Pair)%>%
mutate(
Closing.price = as.numeric(Closing.price),
Date = as.POSIXct(Time / 1000, origin = "1970-01-01", tz = "UTC")
)%>%
select(-Time)
source('priceFun.R')
dfZValues
zValues <- lapply(corrPairs, function(df){
missMatch(df)
})%>%
list_rbind()%>%
na.omit%>%
arrange(desc(abs(z_last)))
infos <- apply(zValues, 1, function(row){
coinA <- row[1]
coinB <- row[2]
CoinA_Close <- dfA %>%
filter(Pair == coinA)%>%
select(Closing.price)%>%
c
CoinB_Close <- dfB %>%
filter(Pair == coinB)%>%
select(Closing.price)%>%
c
CoinA_Close <- CoinA_Close[[1]]
CoinB_Close <- CoinB_Close[[1]]
lenB <- length(CoinB_Close)
lenA <- length(CoinA_Close)
if(lenA != lenB){
minlen <- min(c(lenA, lenB))
CoinA_Close <- CoinA_Close[1:minlen]
CoinB_Close <- CoinA_Close[1:minlen]
}
beta <- coef(lm(log(CoinB_Close) ~ log(CoinA_Close)))[[2]]
PA <- last(CoinA_Close)
PB <- last(CoinB_Close)
if(as.double(row[[3]]) < 0){
qty_B <-  N_short / PB_now
qty_A <-  beta * N_short / PA_now
}
if(as.double(row[[3]]) > 0){
qty_A <-  N_short / PA_now
qty_B <-  beta * N_short / PB_now
}
df <- data.frame(
AmountA = qty_A,
AmountB = qty_B,
lastCloseA = PA,
lastCloseB = PB
)
return(df)
})%>%
list_rbind()
cbind(zValues, infos)
cbind(infos, zValues)
